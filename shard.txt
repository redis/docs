3.1 Core Functionality
The feature introduces a shard window ratio  - suggested $shard_k_ratio - parameter that controls how many results each shard retrieves relative to the requested top_k. This creates a tunable trade-off between accuracy and performance.

Calculation: shard_results = top_k × window_ratio

3.2 API Integration
Following Redis vector search patterns, the new parameter will be implemented as a Query Attribute using the existing =>{...} syntax.

API Syntax


FT.SEARCH <index_name> 
"<filter>=>[KNN <top_k> @<vector_field> $<vector_param>]=>{$SHARD_K_RATIO: <ratio_value>; $YIELD_DISTANCE_AS: <distance_field>}"
PARAMS <param_count> <vector_param> <vector_blob> [additional_params...]
SORTBY <distance_field>
DIALECT 2
Example Usage


# Basic usage: Retrieve 50 results per shard instead of 100
FT.SEARCH documents 
"*=>[KNN 100 @doc_embedding $BLOB]=>{$SHARD_K_RATIO: 0.5; $YIELD_DISTANCE_AS: vector_distance}"
PARAMS 2 BLOB "\x12\xa9\xf5\x6c"
SORTBY vector_distance
DIALECT 2
# Combined with other query attributes
FT.SEARCH documents 
"*=>[KNN 100 @doc_embedding $BLOB]=>{$SHARD_K_RATIO: 0.3; $EF_RUNTIME: 150; $YIELD_DISTANCE_AS: vector_distance}"
PARAMS 4 BLOB "\x12\xa9\xf5\x6c" EF 150
SORTBY vector_distance
DIALECT 2
# With filtering
FT.SEARCH movies 
"(@category:{action})=>[KNN 50 @movie_embedding $BLOB]=>{$SHARD_K_RATIO: 0.6; $YIELD_DISTANCE_AS: movie_distance}"
PARAMS 2 BLOB "\x12\xa9\xf5\x6c"
SORTBY movie_distance
DIALECT 2
3.3 Parameter Specifications
Attribute

Value Range

Default

Behavior

Attribute

Value Range

Default

Behavior

$SHARD_RATIO

0.1 - 1.0

1.0

Ratio of top_k results to fetch per shard

Validation Rules
Range: Must be between higher than 0 and 1.0 (inclusive)

Precision: Support up to 2 decimal places (0.01 minimum)

Minimum results: Each shard must retrieve at least max(top_k/#shards, ceil(top_k × ratio)) results, not allowing to return less results than the requested K (NEED DOCUMENTATION)

Error handling: Invalid ratios return descriptive error messages

Behavioral Examples
top_k=100, ratio=0.5 → 50 results per shard

top_k=10, ratio=0.3 → 3 results per shard

top_k=7, ratio=0.2 → 2 results per shard (ceiling applied)

Documentation required for the following limitations:
Minimum K results from the shards will always be top_k/shardsif the user-defined ratio is lower than that, the server will ignore it

In case some unbalanced shard returns less than the amount required for fulfilling the top_k results, when using ratio, it could lead to fewer results than requested in the top_k. If that’s the case, it requires adjusting the ratio to a higher value