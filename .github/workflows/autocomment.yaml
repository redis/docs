name: Auto Comment on PR

on:
  pull_request:
    paths:
    - 'content/**'
    types:
      - opened
      - synchronize
permissions:
  pull-requests: write

jobs:
  auto-comment:
    runs-on: ubuntu-latest

    steps:
      - name: 'Install jq'
        run: sudo apt-get install jq

      - name: Create Comment
        run: |
          set -e

          PR_NUMBER=${{ github.event.pull_request.number }}
          BRANCH_NAME=${{ github.head_ref }}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          CREATE_COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          UPDATE_COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/comments"
          FILES_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/files"

          # Check if comment already exists
          EXISTING_COMMENT_JSON=$(curl -Ls \
                              -H "Accept: application/vnd.github+json" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                              $CREATE_COMMENT_URL \
                              | jq -r '.[] | select(.user.login == "github-actions[bot]")'
                            )
          EXISTING_COMMENT_ID=$(jq -r '.id' <<<"$EXISTING_COMMENT_JSON")
          EXISTING_COMMENT=$(jq -r '.body' <<<"$EXISTING_COMMENT_JSON")

          # Get all changed md files
          CHANGED_FILES=$(curl -Ls \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            $FILES_URL \
              | jq -r --arg prefix $BRANCH_NAME/ '.[] | select(.filename | test("content\/.+\\.md")) | ($prefix + .filename)' \
              | sed -E -e 's|(^[^/]+/)([^/]+/)|\1|' -e 's|^|https://redis.io/docs/staging/|' -e 's|(_?index)?\.md||' \
              | uniq \
              | xargs \
              | sed 's/ /<br>/g')

          if [[ -z "$CHANGED_FILES" ]]
          then
            if [[ -z "$EXISTING_COMMENT_ID" ]]
            then
              printf '%s\n' 'Nothing to do!'
              exit 0
            else
              # If a comment already exists but there are no changed files in the PR anymore, delete the comment
              curl -Ls \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                "${UPDATE_COMMENT_URL}/${EXISTING_COMMENT_ID}"
              printf '%s\n' 'Comment deleted!'
              exit 0
            fi
          fi

          COMMENT="Staging links:<br> $CHANGED_FILES"

          printf '%s %s\n' 'Writing comment: ' "$COMMENT"

          generate_post_data()
          {
            cat <<EOF
          {
            "body": "$COMMENT"
          EOF
          }

          if [[ -n "$EXISTING_COMMENT_ID" ]]
          then
            # Update comment on pull request if comment is actually different
            if [[ "$COMMENT" != "$EXISTING_COMMENT" ]]
            then
              curl -Ls \
                -X PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                "${UPDATE_COMMENT_URL}/${EXISTING_COMMENT_ID}" \
                --data "$(generate_post_data)" 1>/dev/null

              printf '%s\n' 'Comment updated!'
            else
              printf '%s\n' 'Nothing changed!'
            fi
          else
            # Write comment on pull request
            curl -Ls \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              $CREATE_COMMENT_URL \
              --data "$(generate_post_data)" 1>/dev/null

            printf '%s\n' 'Comment written!'
          fi